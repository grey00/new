##1 Linear Regression
#objective of linear regression is to find a relationship between one or more independent variables and dependent varables
data(cars)
View(cars)
summary(cars)
"scatter.smooth(x=cars$speed,y=cars$dist,main=""stopping distance by speed"")#help visualize linear realtionship "
"linearmodel=lm(formula = dist~speed,data = cars)#the output is the expected distance ie -17.579 required for the car to stop "
linearmodel
summary(linearmodel)


##2 regression and prediction
data(cars)
View(cars)
"scatter.smooth(x=cars$speed,y=cars$dist,main=""stopping distance by speed"")#help visualize linear realtionship "
"linearmodel=lm(formula = dist~speed,data = cars)#the output is the expected distance ie -17.579 required for the car to stop "
linearmodel
#using our model tp predict the stopping distance for speed 16
"x=list(""speed""=16)"
x
"predict(linearmodel,x)"


##3 least square method
"A <- structure(list(Time = c(0, 1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30),  Counts = c(126.6, 101.8, 71.6, 101.6, 68.1, 62.9, 45.5, 41.9, 46.3, 34.1, 38.2, 41.7, 24.7, 41.5, 36.6, 19.6, 22.8, 29.6, 23.5, 15.3, 13.4, 26.8, 9.8, 18.8, 25.9, 19.3)), .Names = c(""Time"", ""Counts""),row.names = c(1L, 2L, 3L, 5L, 7L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 19L, 20L, 21L, 22L, 23L, 25L, 26L, 27L, 28L, 29L, 30L, 31L),class = ""data.frame"")"
attach(A)
names(A)
#straight line
linear.model <-lm(Counts ~ Time)
"plot(Time, Counts, pch=16, ylab = ""Counts "", cex.lab = 1.3, col = ""red"" )"
"abline(lm(Counts ~ Time), col = ""blue"")"
#curve fitting
Time2 <- Time^2
quadratic.model <-lm(Counts ~ Time + Time2)
"timevalues <- seq(0, 30, 0.1)"
"predictedcounts <- predict(quadratic.model,list(Time=timevalues, Time2=timevalues^2))"
"plot(Time, Counts, pch=16, xlab = ""Time (s)"", ylab = ""Counts"", cex.lab = 1.3, col = ""blue"")"
"lines(timevalues, predictedcounts, col = ""darkgreen"", lwd = 3)"


##4 classification/ naives bayes
"data(""Titanic"")"
newT=as.data.frame(Titanic)
View(newT)
library(e1071)
library(caTools)
library(caret)
library(dplyr)
library(ggplot2)
"ggplot(newT,aes(x=Survived))+geom_bar(width=0.5,fill=""coral"")+geom_text(stat='count',aes(label=stat(count)))"
"newT=subset(newT,select = c(1:4))"
"split=sample.split(newT,SplitRatio = 0.7)"
"train_cl=subset(newT,split==""TRUE"")"
"test_cl=subset(newT,split==""FALSE"")"
"model=naiveBayes(Survived~.,train_cl)"
model
"predict=predict(model,test_cl)"
predict
table(predict)
table(test_cl$Survived)
"cm=table(test_cl$Survived,predict)"
cm
confusionMatrix(cm)


##5 linear programming
library(lpSolve)
"#max z=3x1+2x2 Subject to x1+x2<=4,x1-x2<=2"
"objf=c(3,2)"
"constraints=matrix(c(1,1,1,-1),nrow=2,byrow=T)"
constraints
"constsigns=c(""<="",""<="")"
"constvals=c(4,2)"
"z=lp(""max"",objf,constraints,constsigns,constvals)"
"z=lp(""max"",objf,constraints,constsigns,constvals)$solution"
z


##6 Assignment problem
library(lpSolve)
#4x4
"costmat=matrix(c(10,5,12,8,12,10,14,15,19,7,13,11,11,8,11,9),4,4)"
costmat
lp.assign(costmat)
lp.assign(costmat)$solution

#4x4 unbalanced
"costmat=matrix(c(9,13,35,18,26,27,20,30,15,6,15,20),3,2)"
costmat
lp.assign(costmat)
lp.assign(costmat)$solution

#5x5
"x=matrix(c(160,130,175,190,200,135,120,130,160,175,140,110,155,170,185,50,50,80,80,110,55,35,70,80,105),5,5,byrow = T)"
x
lp.assign(x)
lp.assign(x)$solution


##7 Transportation
library(lpSolve)
"costs=matrix(c(700,800,900,900,800,700),nrow=2)"
"row.signs=rep(""<="",2)"
"row.rhs=c(12,15)"
"col.signs=rep("">="",3)"
"col.rhs=c(10,8,9)"
"lptrans=lp.transport(costs,""min"",row.signs,row.rhs,col.signs,col.rhs)"
lptrans$solution
lptrans$objval


##8 Critical path
"install.packages(""devtools"")"
"devtools::install_github(""bgreenawald/projmanr"")"
"install.packages(""projmanr"")"
library(projmanr)
"id=c(1,2,3,4,5,6)"
"name=c('A','B','C','D','E','F')"
"duration=c(3,4,4,2,1,4)"
"pred=c("""",""1"",""1,2"",""1,3"",""2,3,4"",""3,5"")"
"df= data.frame(id,name,duration,pred)"
df
"critical_path(df,network=T)"
