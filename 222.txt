#############
### prac1a###
#############

->>>The dataset ToyotaCorolla.csv contains data 
->>>on used cars on sale during the late summer of 2004 
in the Netherlands. It has 1436 records containing 
details on attributes, including Price, Age, Kilometers, 
HP, and other specifications. 
a) Show the differentsubsets of the whole dataset

x=read.csv("ToyottaCorolla.csv",header=TRUE)
x
dim(x)
names(x)
head(x)
View(x)
x[1:10,]
x[,3:9]
x[5,1:2]
x[6,c(1:3,6,8)]
x$KM[3]
length(x$HP)
#b
mean(x$Age)
mean(x$Weight)
summary(x$Price)
summary(x)

#c
y=model.matrix(~0+ FuelType + MetColor,data=x)
y =as.data.frame(y) 
y
View(y)
#d
set.seed(1)
#creating partition sample stores data in character
train.rows=sample(rownames(x),dim(x)[1]*0.5)
valid.rows=sample(setdiff(rownames(x),train.rows),dim(x)[1]*0.3)
test.rows=setdiff(rownames(x),union(train.rows,valid.rows))

#convert rows to data cause data is in character form right not
train.data=x[train.rows,]
valid.data=x[valid.rows,]
test.data=x[test.rows,]
View(train.data)
View(valid.data)
View(test.data)

#e
library("ggplot2")
z=x[1:10,]
#barplot
ggplot(data=z,mapping=aes(x=Price)) + geom_bar()
ggplot(data=z,mapping=aes(x=FuelType)) + geom_bar(fill="blue",color="black")
#scatter plot
ggplot(x,mapping=aes(x=Age,y=Price))+geom_point(size=3)

##################
###Practical 2####
##################
->>>The file ApplianceShipments.csv 
->>>contains the series of quarterly shipments 
->>>(in millions of dollars) of US household appliances 
->>>between 1985 and 1989.a. 
->>>Create a well-formatted time plot of the data using R.

ship=read.csv("ApplianceShipments.csv")
View(ship)
summary(ship)

#a timeplot ts coverts data to timeseries frequency is 4 cause its quarterly data
shipment.ts=ts(ship$Shipments,start = c(1985,1) ,end =  c(1989,4) ,frequency = 4) #frequency annual(1),quarter(4),month(12)
plot(shipment.ts,xlab ="year",ylab="shipment(in million $)",col="blue",type="b",lwd=2.5)
plot(shipment.ts,xlab ="year",ylab="shipment(in million $)",col="blue",type="p",lwd=2.5)
plot(shipment.ts,xlab ="year",ylab="shipment(in million $)",col="blue",type="l",lwd=2.5)
text(x = shipment.ts,labels = shipment.ts,pos=4,cex=0.8)


b. Using R, create one chart with four separate lines, 
one line for each of Q1, Q2, Q3,and Q4. 
In R, this can be achieved by generating a data.frame 
for each quarter Q1,Q2, Q3, Q4, 
and then plotting them as separate series on the line graph. 


#b line graphs for each quarter
library(ggplot2)
par(oma = c(0,0,0,2))
xrange=c(1,5)
yrange=range(shipment.ts)
plot(xrange,yrange,main = "shipment quarter wise",type="p",xlab="year",ylab = "shipment",bty="l")
colors=rainbow(4)
linetype=c(1:4) #four different line
plotchar=c(1:4)#four different dot
for (i in 1:4)
{ current_quarter= subset(shipment.ts,cycle(shipment.ts)==i)
  lines(current_quarter,type = "b",lwd=3,lty=linetype[i],col=colors[i],pch=plotchar[i])
}
legend(4,4900,1:4,cex=1.2,col=colors,lty = linetype,pch=plotchar,title="quarter no")

#c
yearly=aggregate(shipment.ts)
View(yearly)
plot(yearly ,type = "b",bty="l",col="red",lwd=2)
text(x=yearly,labels = yearly,pos = 3,cex=0.8)

#################
## Practical 3###
#################

->>>Laptop Sales at a London Computer Chain: 
->>>The file LaptopSalesJanuary2008.csv contains data 
->>>for all sales of laptops at a computer chain in London in January 2008. 
->>>This is a subset of the full dataset that includes data 
->>>e entire year. a. 
->>>Create a barchart, showing the average retail price by store. 
->>>Which store has the highest average? Which has the lowest?

LS=read.csv("LaptopSalesJanuary2008.csv",header=TRUE)
View(LS)

#a average retail price store wise
library(ggplot2)
ggplot(LS) + geom_bar(aes(Store.Postcode,Retail.Price),stat="summary",fun.y="mean",fill="red",color="black")
agg.data=aggregate(data=LS,Retail.Price~Store.Postcode,mean)#agg of retail price store wise to display lowest o highest
View(agg.data)
agg.data[order(agg.data$Retail.Price),] #for sorting
 
b. To better compare retail prices across stores, 
create side-by-side boxplots of retail price by store. 
Now compare the prices in the two stores from (a). 
 there seem to be a difference between their price distributions?

#b boxplots
ggplot(LS)+geom_boxplot(aes(Store.Postcode,Retail.Price))
subLS=subset(LS,Store.Postcode%in% c("W4 3PH","N17 6QA")) #box plot for highest and lowest from th A part
ggplot(subLS) +geom_boxplot(aes(Store.Postcode,Retail.Price))


## Practical 4 ##
#################
->>>> file Iris.csv contains 50 samples from each of 3 species of Iris (Iris setosa,Iris virginica,Iris versicolor). 
A)Split the data to training and test data. Build the Naïve Bayes Classifier model for this data

iris.df=read.csv("iris.csv")
View(iris)

library(e1071)
library(caTools)
library(caret)
library(ggplot2)

ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width))+geom_point(aes(color=Species,shape=Species),size=3)+ggtitle("Sepal.Length vs Sepal.Width")
# Splitting data into train
# and test data
split <-sample.split(iris, SplitRatio = 0.7)
train_cl <-subset(iris, split == "TRUE")
test_cl <-subset(iris, split == "FALSE")

# Feature Scaling
train_scale <-scale(train_cl[, 1:4])
test_scale <-scale(test_cl[, 1:4])

# Fitting Naive Bayes Model
# to training dataset
set.seed(120)  # Setting Seed
classifier_cl <-naiveBayes(Species ~ ., data = train_cl)
classifier_cl

# Predicting on test data
nbpredict <-predict(classifier_cl,test_scale)
nbpredict

# B)Build the confusion matrix.
# Confusion Matrix
cm <-table(test_cl$Species, nbpredict)
# Model Evaluation
confusionMatrix(cm)

###################
### practical 5 ###
###################

==>The file Iris.csv contains 50 samples from 
==>each of 3 species of Iris 
(Iris setosa,Iris virginica,Iris versicolor).
A) Split the data to training and test data. 
Build the KNN model for this data with different ‘k’ values

library(class)
library(caTools)
library(caret)
iris.df=read.csv("Iris.csv")
split=sample.split(iris,SplitRatio=0.7)
train_cl=subset(iris,split=="TRUE")
test_cl=subset(iris,split=="FALSE")
train_scale=scale(train_cl[,1:4])
test_scale=scale(test_cl[,1:4])
knn_1=knn(train=train_scale,test=test_scale,cl=train_cl$Species,k=1)
knn_1
knn_7=knn(train=train_scale,test=test_scale,cl=train_cl$Species,k=7)
knn_7
knn_15=knn(train=train_scale,test=test_scale,cl=train_cl$Species,k=15)
knn_15
knn_19=knn(train=train_scale,test=test_scale,cl=train_cl$Species,k=19)
knn_19

###>B) Build the confusion matrix and calculate the accuracy for all ‘k’ values.
#BuildConfusionMatrix,CalculateAccuracy

cm=table(test_cl$Species,knn_1)
cm
confusionMatrix(cm)
#Calculate Accuracy for All K Values
Error_1=mean(knn_1!=test_cl$Species)
print(paste('Accuracy=',1-Error_1))
Error_7=mean(knn_1!=test_cl$Species)
print(paste('Accuracy=',1-Error_7))
Error_15=mean(knn_1!=test_cl$Species)
print(paste('Accuracy=',1-Error_15))
Error_19=mean(knn_1!=test_cl$Species)
print(paste('Accuracy=',1-Error_19))


###################
### practical 6 ###
###################

==>The file Iris.csv contains 50 samples from each of 3 
==>species of Iris (Iris setosa,Iris virginica,Iris versicolor).
A) Split the data to training and test data. 
Build the decision tree for this data

library(datasets)
library(caTools)
library(party)
library(magrittr)
library(dplyr)
#Load iris data
data("iris")
sample_data=sample.split(iris, SplitRatio=0.8) 
train_data=subset(iris, sample_data==TRUE)
test_data=subset(iris, sample_data==FALSE) 
model=ctree(Species~.,train_data) 
plot(model)

B) Predict the species for the test data 
and determine the accuracy of the mode

#testing the species 
predict_model=predict(model, test_data)
predict_model
#creates a table to count how many are classified m at tablettest dataSspecies, predict model)
m_at=table(test_data$Species,predict_model)
m_at
#Determining the accuracy of the model developed 
ac_Test=sum(diag(m_at))/ sum(m_at) 
print(paste('Accuracy for test is found to be', ac_Test))

